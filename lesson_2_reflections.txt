What happens when you initialize a repository? Why do you need to do it?
	A .git file gets created to keep track of all future commits for the repository. We need to create this file as without it, we wont be able to navigate between the different versions.

How is the staging area different from the working directory and the repository?
What value do you think it offers?
	The staging area is a buffer between the working directory and the repository. Instead of going directly from working directory to repository and being unable to make changes once you make the commit, the staging area helps organize all the files you wish to make a commit on and once you feel that you have everything ready, you can proceed with the commit.

How can you use the staging area to make sure you have one commit per logical
change?
	By running the Git Status command, you can see which files have had edits done on them and which files you want to add to the staging area. After adding a file you can run Git status again to confirm that the file(s) added are all for one logical change.

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?
	When testing a new enhancement or modifying the code to test a new theory, it would be helpful to have branches instead of just one main repoistory so you can make changes to production code without having to play around with different commit versions and finding exactly where one change began and the next change ends.

How do the diagrams help you visualize the branch structure?
	The diagrams give a visual linkage between the commits and which commit do they offshoot to make a branch. From that linkage, we also can see visually all the commits on that branch since the commit that the two branches have in common. 

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?
	Merging two branches helps merge the changes made in two different versions of the same doc together. If we created a branch to test a new enhancement, and continued making changes on the master branch, with merging, we can automatically add the two different sets of code together. In the diagram, we represent this by drawing arrows from the most recent commits on the two branches and combinging them to one new commit. This visually shows us that now this is where those two points have combined and we can now see that all the different commits merge together.

What are the pros and cons of Git's automatic merging vs. always doing merges
manually?
	Automatic merge takes away the tedious process of going through line by line of two files to determine what needs to be preserved and what needs to be deleted.